initSidebarItems({"enum":[["BencodeConvertErrorKind","The kind of an error."],["BencodeMutKind","Abstract representation of a `BencodeMut` object."],["BencodeParseErrorKind","The kind of an error."],["BencodeRefKind","Abstract representation of a `BencodeRef` object."]],"macro":[["ben_bytes","Construct `BencodeMut` bytes by supplying a type convertible to `Vec<u8>`."],["ben_int","Construct a `BencodeMut` integer by supplying an `i64`."],["ben_list","Construct a `BencodeMut` list by supplying a list of `BencodeMut` values."],["ben_map","Construct a `BencodeMut` map by supplying string references as keys and `BencodeMut` as values."]],"struct":[["BDecodeOpt","Stores decoding options for modifying decode behavior."],["BencodeConvertError","The Error type."],["BencodeMut","`BencodeMut` object that stores references to some data."],["BencodeParseError","The Error type."],["BencodeRef","`BencodeRef` object that stores references to some buffer."]],"trait":[["BConvert","Trait for casting bencode objects and converting conversion errors into application specific errors."],["BDictAccess","Trait for working with generic map data structures."],["BListAccess","Trait for working with generic list data structures."],["BMutAccess","Trait for write access to some bencode type."],["BRefAccess","Trait for read access to some bencode type."]],"type":[["BencodeConvertResult","Convenient wrapper around `std::Result`."],["BencodeParseResult","Convenient wrapper around `std::Result`."]]});